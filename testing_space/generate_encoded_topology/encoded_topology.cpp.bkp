
#define tra_sub_node(curr_node)   \
                    unsigned feature_id = subtree_node_list[(curr_node)*3]; \
                    float node_value    = subtree_node_list[(curr_node)*3+1]; \
                    unsigned is_tree_leaf    = subtree_node_list[(curr_node)*3+2]; \
                    if (is_tree_leaf==1){ atomicAdd(results+tid, (unsigned)node_value); return_from_curr_tree = true; break; }\
                    bool not_subtree_bottom = (curr_node) < subtree_leaf_idx_boundry; \
                    bool go_left = row[feature_id] <= node_value; \
                    if (not_subtree_bottom){ \
                        if (go_left){ \
                            tra_sub_node((curr_node)*2+1) \
                        }\
                        else{\
                            tra_sub_node((curr_node)*2+2) \
                        }\
                    } else{\
                        unsigned leaf_idx = (curr_node) - subtree_leaf_idx_boundry;\
                        if (go_left)\
                            curr_subtree_idx = subtree_idx_to_subtree[2*leaf_idx];\
                        else\
                            curr_subtree_idx = subtree_idx_to_subtree[2*leaf_idx+1];\
                        goto SUBTREE_END;\
                    }
                

void
hier_kernel(
  unsigned num_of_trees           ,
  unsigned *prefix_sum_subtree_nums        ,
  float    *nodes                          ,
  unsigned *idx_to_subtree                 ,  
  unsigned *leaf_idx_boundry               ,
  unsigned *g_subtree_nodes_offset         ,  
  unsigned *g_subtree_idx_to_subtree_offset,  

  unsigned num_of_queries         ,
  unsigned num_of_features        ,
  float *queries                  ,
  unsigned *results                 ,
  float *subtree_node_list,
  int subtree_leaf_idx_boundry,
 int *row ,
 int *subtree_idx_to_subtree
){
  int curr_subtree_idx;

  while(true){  //iterate over subtrees
                //subtree starts 


                //iterate over nodes in a subtree
                bool return_from_curr_tree = false;
                //start from node 0
                unsigned curr_node = 0;
                
                //start a recursive/iterative subtree traversal
                tra_sub_node(2+1)   
                
                
                //if return from curr tree, skip all rest of subtrees, break from looping over subtrees
    SUBTREE_END:  
                if (return_from_curr_tree) break;
                //subtree ends
  }
}
